/**
 * bringalong
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: todo@test.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { LoadProductsForStoreResult } from '../model/loadProductsForStoreResult';
import { LoadStoreOrdersResult } from '../model/loadStoreOrdersResult';
import { SearchStoresResult } from '../model/searchStoresResult';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://test.host.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param storeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadOrders(storeId: number, observe?: 'body', reportProgress?: boolean): Observable<LoadStoreOrdersResult>;
    public loadOrders(storeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoadStoreOrdersResult>>;
    public loadOrders(storeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoadStoreOrdersResult>>;
    public loadOrders(storeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling loadOrders.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<LoadStoreOrdersResult>(`${this.basePath}/orders/${encodeURIComponent(String(storeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param storeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadProductsForStore(storeId: number, observe?: 'body', reportProgress?: boolean): Observable<LoadProductsForStoreResult>;
    public loadProductsForStore(storeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoadProductsForStoreResult>>;
    public loadProductsForStore(storeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoadProductsForStoreResult>>;
    public loadProductsForStore(storeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling loadProductsForStore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<LoadProductsForStoreResult>(`${this.basePath}/products/${encodeURIComponent(String(storeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param plz 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchStores(plz: string, observe?: 'body', reportProgress?: boolean): Observable<SearchStoresResult>;
    public searchStores(plz: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchStoresResult>>;
    public searchStores(plz: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchStoresResult>>;
    public searchStores(plz: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (plz === null || plz === undefined) {
            throw new Error('Required parameter plz was null or undefined when calling searchStores.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<SearchStoresResult>(`${this.basePath}/stores/${encodeURIComponent(String(plz))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
